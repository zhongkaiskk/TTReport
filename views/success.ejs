<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Success</title>
    <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>
    <script type="importmap">
    {
        "imports": {
            "three": "https://unpkg.com/three@0.157.0/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.157.0/examples/jsm/"
        }
    }
    </script>
    <style>
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0px); }
        }

        @keyframes slideUp {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        body {
            margin: 0;
            overflow: hidden;
            background: #000000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #fff;
        }

        .container {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            z-index: 10;
            background: rgba(0, 0, 0, 0.0);
            padding: 30px;
            border-radius: 20px;
        }

        #success-icon {
            width: 120px;
            height: 120px;
            margin-bottom: 20px;
            animation: float 3s ease-in-out infinite;
        }

        #success-icon circle {
            fill: none;
            stroke: #00ffff;
            stroke-width: 3;
            stroke-dasharray: 251;
            stroke-dashoffset: 251;
            animation: circle-draw 2s ease forwards;
        }

        #success-icon path {
            fill: none;
            stroke: #00ffff;
            stroke-width: 3;
            stroke-dasharray: 70;
            stroke-dashoffset: 70;
            animation: check-draw 0.8s ease forwards 0.8s;
        }

        @keyframes circle-draw {
            to { stroke-dashoffset: 0; }
        }

        @keyframes check-draw {
            to { stroke-dashoffset: 0; }
        }

        .title {
            font-size: 2.5em;
            color: #00ffff;
            margin-bottom: 15px;
            opacity: 0;
            animation: slideUp 0.8s ease forwards 1.2s;
            text-shadow: 0 0 10px #00ffff;
        }

        .message {
            font-size: 1.2em;
            color: #ffffff;
            margin-bottom: 30px;
            opacity: 0;
            animation: slideUp 0.8s ease forwards 1.5s;
        }

        .sub-message {
            font-size: 1em;
            color: #00ffff;
            margin-bottom: 40px;
            opacity: 0;
            animation: slideUp 0.8s ease forwards 1.8s;
        }

        .check-report-btn {
            background: linear-gradient(45deg, #00ffff, #0088ff);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 30px;
            font-size: 1.1em;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
            opacity: 0;
            animation: slideUp 0.8s ease forwards 2.1s;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }

        .check-report-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
        }

        .mm-text {
            display: block;
            font-size: 0.8em;
            margin-top: 5px;
        }

        canvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1;
        }
    </style>
</head>
<body>
    <div class="container">
        <svg id="success-icon" viewBox="0 0 90 90">
            <circle cx="45" cy="45" r="40"/>
            <path d="M25 45 L40 60 L65 35"/>
        </svg>
        <h1 class="title">Success!</h1>
        <p class="message">Your submission has been processed successfully</p>
        <p class="sub-message">သေချာပြန်စစ်ပါ မှားရင်ဖိုင်း</p>
        <a href="https://bit.ly/Report-Check" target="_blank" class="check-report-btn">
            <span class="mm-text">Report စစ်ရန်</span>
        </a>
    </div>

    <script type="module">
        import * as THREE from 'three';

        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x000000);
        document.body.appendChild(renderer.domElement);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0x00ffff, 2, 100);
        pointLight.position.set(10, 10, 10);
        scene.add(pointLight);

        // Create stars
        const starsGeometry = new THREE.BufferGeometry();
        const starsCount = 3000;
        const starsPositions = new Float32Array(starsCount * 3);

        for (let i = 0; i < starsCount * 3; i++) {
            starsPositions[i] = (Math.random() - 0.5) * 100;
        }

        starsGeometry.setAttribute('position', new THREE.BufferAttribute(starsPositions, 3));
        const starsMaterial = new THREE.PointsMaterial({
            size: 0.1,
            color: 0xffffff,
        });
        const stars = new THREE.Points(starsGeometry, starsMaterial);
        scene.add(stars);

        // Glow material
        function createGlowMaterial(color, intensity = 1) {
            return new THREE.MeshBasicMaterial({
                color: color,
                transparent: true,
                opacity: 0.3 * intensity,
            });
        }

        // Create planets
        function createPlanet(radius, color, orbitRadius, speed) {
            const planetGeometry = new THREE.SphereGeometry(radius, 32, 32);
            const planetMaterial = new THREE.MeshPhongMaterial({
                color: color,
                shininess: 100,
            });
            const planet = new THREE.Mesh(planetGeometry, planetMaterial);

            // Create glow for the planet
            const glowGeometry = new THREE.SphereGeometry(radius + 0.1, 32, 32);
            const glowMaterial = createGlowMaterial(color);
            const glow = new THREE.Mesh(glowGeometry, glowMaterial);

            // Create orbit
            const orbitGeometry = new THREE.RingGeometry(orbitRadius - 0.1, orbitRadius + 0.1, 64);
            const orbitMaterial = new THREE.MeshBasicMaterial({
                color: 0x444444,
                side: THREE.DoubleSide,
                transparent: true,
                opacity: 0.2,
            });
            const orbit = new THREE.Mesh(orbitGeometry, orbitMaterial);
            orbit.rotation.x = Math.PI / 2;
            scene.add(orbit);

            return {
                mesh: planet,
                glow: glow,
                orbit: orbitRadius,
                speed: speed,
                angle: Math.random() * Math.PI * 2,
            };
        }

        const planets = [
            createPlanet(1, 0x00ffff, 8, 0.01), // Cyan planet
            createPlanet(0.9, 0xff00ff, 12, 0.008), // Magenta planet
            createPlanet(1.2, 0x0088ff, 16, 0.005), // Blue planet
            createPlanet(0.6, 0xff8800, 20, 0.02), // Orange planet
        ];

        planets.forEach(planet => {
            scene.add(planet.mesh);
            scene.add(planet.glow);
        });

        // Create central sun
        const sunGeometry = new THREE.SphereGeometry(2, 32, 32);
        const sunMaterial = new THREE.MeshPhongMaterial({
            emissive: 0xffff00,
            emissiveIntensity: 1,
            color: 0xffff00,
        });
        const sun = new THREE.Mesh(sunGeometry, sunMaterial);
        scene.add(sun);

        // Add sun glow
        const sunGlowGeometry = new THREE.SphereGeometry(2.5, 32, 32);
        const sunGlowMaterial = new THREE.MeshBasicMaterial({
            color: 0xffd700,
            transparent: true,
            opacity: 1,
        });
        const sunGlow = new THREE.Mesh(sunGlowGeometry, sunGlowMaterial);
        scene.add(sunGlow);

        camera.position.z = 30;

        // Animation
        let mouseX = 0;
        let mouseY = 0;

        function animate() {
            requestAnimationFrame(animate);

            // Rotate stars slightly
            stars.rotation.y += 0.003;

            // Animate planets
            planets.forEach(planet => {
                planet.angle += planet.speed;
                planet.mesh.position.x = Math.cos(planet.angle) * planet.orbit;
                planet.mesh.position.z = Math.sin(planet.angle) * planet.orbit;
                planet.glow.position.copy(planet.mesh.position);
                planet.mesh.rotation.y += 0.01;
            });

            // Sun rotation
            sun.rotation.y += 0.001;
            sunGlow.rotation.y += 0.01;

            // Camera movement based on mouse
            camera.position.x += (mouseX * 0.05 - camera.position.x) * 0.1;
            camera.position.y += (-mouseY * 0.05 - camera.position.y) * 0.1;
            camera.lookAt(scene.position);

            renderer.render(scene, camera);
        }

        // Mouse movement tracking
        document.addEventListener('mousemove', event => {
            mouseX = (event.clientX - window.innerWidth / 2) * 0.5;
            mouseY = (event.clientY - window.innerHeight / 2) * 0.5;
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        animate();
    </script>
</body>
</html>
